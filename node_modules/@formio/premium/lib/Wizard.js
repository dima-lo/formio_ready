var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import OriginalWizard from 'formiojs/Wizard';
import _ from 'lodash';
var Wizard = /** @class */ (function (_super) {
    __extends(Wizard, _super);
    function Wizard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Wizard.prototype.attach = function (element) {
        var superAttach = _super.prototype.attach.call(this, element);
        if (!this.secondRender) {
            // will run once if the first page contains dynamicWizard component
            this.secondRender = true;
            this.setChangingMode();
        }
        return superAttach;
    };
    Wizard.prototype.hasButton = function (name, nextPage) {
        if (nextPage === void 0) { nextPage = this.getNextPage(); }
        // get page options with global options as default values
        var _a = _.get(this.currentPage, 'component.buttonSettings', {}), _b = _a.previous, previous = _b === void 0 ? this.options.buttonSettings.showPrevious : _b, _c = _a.cancel, cancel = _c === void 0 ? this.options.buttonSettings.showCancel : _c, _d = _a.submit, submit = _d === void 0 ? this.options.buttonSettings.showSubmit : _d, _e = _a.next, next = _e === void 0 ? this.options.buttonSettings.showNext : _e;
        if (this.options.readOnly || !this.hasDynamicWizard()) {
            switch (name) {
                case 'previous':
                    return previous && (this.getPreviousPage() > -1);
                case 'next':
                    return next && (nextPage !== null) && (nextPage !== -1);
                case 'cancel':
                    return cancel;
                case 'submit':
                    return submit && !this.options.readOnly && ((nextPage === null) || (this.page === (this.pages.length - 1)));
                default:
                    return true;
            }
        }
    };
    Wizard.prototype.setChangingMode = function () {
        if (this.options.readOnly) {
            return;
        }
        var dynamicWizardComponent = this.hasDynamicWizard();
        // If the current page contains dynamicWizard component
        if (dynamicWizardComponent) {
            this.emit('setChangingMode', dynamicWizardComponent.id);
            if (this.element && !this.element.classList.contains('dynamicWizard-changingMode')) {
                this.element.classList.add('dynamicWizard-changingMode');
                this.redraw();
            }
        }
        else if (this.element && this.element.classList.contains('dynamicWizard-changingMode')) {
            this.element.classList.remove('dynamicWizard-changingMode');
        }
    };
    Wizard.prototype.hasDynamicWizard = function () {
        return this.currentPage.components.find(function (comp) { return comp.component.type === 'dynamicWizard'; });
    };
    return Wizard;
}(OriginalWizard));
export default Wizard;
