var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import _ from 'lodash';
import { Formio, Components, Utils } from 'formiojs';
var EditGrid = Components.components.editgrid;
import templates from './templates';
var FormState = {
    New: 'new',
    Editing: 'editing',
    Saved: 'saved',
    Viewing: 'viewing',
    Removed: 'removed',
    Draft: 'draft',
};
var DynamicWizard = /** @class */ (function (_super) {
    __extends(DynamicWizard, _super);
    function DynamicWizard() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.type = 'dynamicWizard';
        _this.isChangingMode = true;
        _this.changingRowIndex = null;
        _this.step = 0;
        _this.buttonSettings = {
            showPrevious: true,
            showNext: true,
            showSubmit: true,
            showCancel: !_this.options.readOnly
        };
        _this.shouldUpdate = true;
        return _this;
    }
    DynamicWizard.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return EditGrid.schema.apply(EditGrid, __spreadArrays([{
                type: 'dynamicWizard',
                label: 'Dynamic Wizard',
                key: 'dynamicWizard',
                multiple: true,
                templates: {
                    header: DynamicWizard.defaultHeaderTemplate,
                    row: DynamicWizard.defaultRowTemplate,
                    footer: '',
                },
            }], extend));
    };
    Object.defineProperty(DynamicWizard, "builderInfo", {
        get: function () {
            return {
                title: 'Dynamic Wizard',
                group: 'premium',
                icon: 'tasks',
                weight: 20,
                schema: DynamicWizard.schema(),
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard, "defaultHeaderTemplate", {
        get: function () {
            return "<div class=\"row\">\n    <div class=\"col-sm-2\">\n      Users\n    </div>\n  </div>";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard, "defaultRowTemplate", {
        get: function () {
            return "<div class=\"list-group-item\">\n    {% ctx.util.eachComponent(ctx.components, function(component) { %}\n    {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}\n    <div class=\"row\">\n      <div class=\"col-sm-2\">\n        {{ component.key }}\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-2\">\n        {{ ctx.getView(component, ctx.row[component.key]) }}\n      </div>\n    </div>\n    {% } %}\n    {% }) %}\n  </div>";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "dynamicWizardKey", {
        get: function () {
            return "dynamicWizard-" + this.key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "rowRef", {
        get: function () {
            return this.dynamicWizardKey + "-row";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "rowElements", {
        get: function () {
            return this.refs[this.rowRef];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "agreeButtonRef", {
        get: function () {
            return this.dynamicWizardKey + "-agreeButton";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "denyButtonRef", {
        get: function () {
            return this.dynamicWizardKey + "-denyButton";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "agreeButtonElements", {
        get: function () {
            return this.refs[this.agreeButtonRef];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "denyButtonElements", {
        get: function () {
            return this.refs[this.denyButtonRef];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "cancelRowRef", {
        get: function () {
            return this.dynamicWizardKey + "-cancelRow";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "cancelRowElements", {
        get: function () {
            return this.refs[this.cancelRowRef];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "inlineEditMode", {
        get: function () {
            return this.component.inlineEdit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "saveEditMode", {
        get: function () {
            return !this.inlineEditMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DynamicWizard.prototype, "buttons", {
        get: function () {
            var _this = this;
            var buttons = {};
            [
                { name: 'cancel', method: 'cancelRow' },
                { name: 'previous', method: 'prevPage' },
                { name: 'next', method: 'nextPage' },
            ].forEach(function (button) {
                if (_this.hasButton(button.name)) {
                    buttons[button.name] = button;
                }
            });
            return buttons;
        },
        enumerable: false,
        configurable: true
    });
    DynamicWizard.prototype.init = function () {
        if (this.builderMode) {
            this.editRows = [];
        }
        return _super.prototype.init.call(this);
    };
    DynamicWizard.prototype.render = function (children) {
        var _a, _b;
        if (this.builderMode) {
            return _super.prototype.render.call(this);
        }
        var dataValue = this.dataValue || [];
        var headerTemplate = Utils.Evaluator.noeval ? templates.header : _.get(this.component, 'templates.header');
        return _super.prototype.render.call(this, children || this.renderTemplate('dynamicWizard', {
            ref: {
                row: this.rowRef,
                agreeButton: this.agreeButtonRef,
                denyButton: this.denyButtonRef,
            },
            header: this.renderString(headerTemplate),
            footer: this.renderString(_.get(this.component, 'templates.footer'), {
                components: this.component.components,
                value: dataValue,
            }),
            rows: this.editRows.map(this.renderRow.bind(this)),
            currentComponent: this.step === -1 ? null : (_b = (_a = this.editRows[this.changingRowIndex]) === null || _a === void 0 ? void 0 : _a.components[this.step]) === null || _b === void 0 ? void 0 : _b.render(),
            errors: this.editRows.map(function (row) { return row.error; }),
            buttons: this.buttons,
            hasRemoveButtons: this.hasRemoveButtons(),
            isChangingMode: this.isChangingMode,
            dynamicWizardKey: this.dynamicWizardKey,
            readOnly: this.options.readOnly,
        }));
    };
    DynamicWizard.prototype.attach = function (element) {
        var _a;
        var _this = this;
        if (this.builderMode) {
            return _super.prototype.attach.call(this, element);
        }
        this.on('setChangingMode', function (compId) {
            if (_this.shouldUpdate && compId === _this.component.id) {
                _this.addRow();
                _this.shouldUpdate = false;
            }
        });
        this.loadRefs(element, (_a = {},
            _a[this.agreeButtonRef] = 'multiple',
            _a[this.denyButtonRef] = 'multiple',
            _a[this.rowRef] = 'multiple',
            _a[this.dynamicWizardKey + "-cancel"] = 'single',
            _a[this.dynamicWizardKey + "-previous"] = 'single',
            _a[this.dynamicWizardKey + "-next"] = 'single',
            _a));
        this.agreeButtonElements.forEach(function (agreeButton) {
            _this.addEventListener(agreeButton, 'click', function () { return _this.addRow(); });
        });
        this.denyButtonElements.forEach(function (denyButton) {
            _this.addEventListener(denyButton, 'click', function (event) {
                event.preventDefault();
                // Call the button method, then re-enable the button.
                _this.root.nextPage().then(function () {
                    denyButton.removeAttribute('disabled');
                    _this.setLoading(denyButton, false);
                }).catch(function () {
                    denyButton.removeAttribute('disabled');
                    _this.setLoading(denyButton, false);
                });
            });
        });
        this.attachNav();
        if (!this.isChangingMode) {
            this.rowElements.forEach(function (row, rowIndex) {
                // Attach edit and remove button events.
                [
                    {
                        className: 'removeRow',
                        event: 'click',
                        action: function () { return _this.removeRow(rowIndex); },
                    },
                    {
                        className: 'editRow',
                        event: 'click',
                        action: function () {
                            _this.editRow(rowIndex);
                        },
                    },
                ].forEach(function (_a) {
                    var className = _a.className, event = _a.event, action = _a.action;
                    var elements = row.getElementsByClassName(className);
                    Array.prototype.forEach.call(elements, function (element) {
                        _this.addEventListener(element, event, action);
                    });
                });
            });
        }
        else {
            var editRow = this.editRows[this.changingRowIndex];
            if (editRow) {
                this.attachComponents(this.rowElements[0], editRow.components);
            }
        }
        return _super.prototype.attach.call(this, element);
    };
    DynamicWizard.prototype.attachNav = function () {
        var _this = this;
        _.each(this.buttons, function (button) {
            var buttonElement = _this.refs[_this.dynamicWizardKey + "-" + button.name];
            _this.addEventListener(buttonElement, 'click', function (event) {
                event.preventDefault();
                _this[button.method]();
                _this.redraw();
            });
        });
    };
    DynamicWizard.prototype.attachComponents = function (element, components, container) {
        var _a;
        if (container === void 0) { container = this.component.components; }
        if (this.builderMode) {
            return _super.prototype.attachComponents.call(this, element, components, container);
        }
        components = components || this.component.components;
        element = this.hook('attachComponents', element, components, container, this);
        if (!element) {
            // Return a non-resolving promise.
            return (new Formio.Promise(function () {
                // empty
            }));
        }
        var index = 0;
        var promises = [];
        if (!this.isChangingMode) {
            Array.prototype.slice.call(element.children).forEach(function (child) {
                if (!child.getAttribute('data-noattach') && components[index]) {
                    promises.push(components[index].attach(child));
                    index++;
                }
            });
        }
        else if (!_.isNil(this.step) && !((_a = element.children[0]) === null || _a === void 0 ? void 0 : _a.getAttribute('data-noattach')) && components[this.step]) {
            promises.push(components[this.step].attach(element.children[0]));
        }
        return Formio.Promise.all(promises);
    };
    DynamicWizard.prototype.isOpen = function (editRow) {
        return [FormState.New, FormState.Editing, FormState.Viewing].includes(editRow === null || editRow === void 0 ? void 0 : editRow.state);
    };
    DynamicWizard.prototype.addRow = function () {
        if (this.options.readOnly) {
            return;
        }
        var dataObj = {};
        var rowIndex = this.editRows.length;
        var editRow;
        if (_.isNil(this.changingRowIndex)) {
            this.changingRowIndex = this.editRows.length;
            editRow = {
                components: this.createRowComponents(dataObj, rowIndex),
                data: dataObj,
                state: FormState.New,
                backup: null,
                error: null,
            };
            this.editRows.push(editRow);
            if (this.inlineEditMode) {
                this.dataValue.push(dataObj);
                this.triggerChange();
            }
            this.checkRow('checkData', null, {}, editRow.data, editRow.components);
            if (this.component.modal) {
                this.addRowModal(rowIndex);
            }
        }
        this.isChangingMode = true;
        this.step = this.step !== -1 ? this.step : 0;
        this.toggleChangingMode();
        return editRow || this.editRows[this.changingRowIndex];
    };
    DynamicWizard.prototype.cancelRow = function () {
        var rowIndex = _.clone(this.changingRowIndex);
        if (this.options.readOnly) {
            return;
        }
        var editRow = this.editRows[rowIndex];
        switch (editRow.state) {
            case FormState.New: {
                editRow.state = FormState.Removed;
                this.clearErrors(rowIndex);
                this.destroyComponents(rowIndex);
                if (this.inlineEditMode) {
                    this.splice(rowIndex);
                }
                this.editRows.splice(rowIndex, 1);
                this.returnPrevPageState();
                break;
            }
            case FormState.Editing: {
                editRow.state = editRow.prevState;
                if (this.inlineEditMode) {
                    this.dataValue[rowIndex] = editRow.backup;
                }
                editRow.data = editRow.backup;
                editRow.backup = null;
                this.restoreRowContext(editRow);
                if (!this.component.rowDrafts) {
                    this.clearErrors(rowIndex);
                }
                this.returnPrevPageState();
                break;
            }
        }
        this.shouldUpdate = true;
        this.checkValidity(null, true);
        this.redraw();
        if (this.component.rowDrafts) {
            this.checkValidity(this.data, false);
        }
    };
    DynamicWizard.prototype.returnPrevPageState = function () {
        this.isChangingMode = false;
        this.step = -1;
        this.changingRowIndex = null;
        this.toggleChangingMode();
    };
    DynamicWizard.prototype.saveRow = function () {
        var _this = this;
        var editRow = this.editRows[this.changingRowIndex];
        if (this.options.readOnly) {
            return;
        }
        var isRowValid = this.validateRow(editRow, true);
        if (!this.component.rowDrafts) {
            if (!isRowValid) {
                return false;
            }
        }
        if (this.saveEditMode) {
            var dataValue = this.dataValue || [];
            switch (editRow.state) {
                case FormState.New: {
                    var newIndex = dataValue.length;
                    dataValue.push(editRow.data);
                    if (this.changingRowIndex !== newIndex) {
                        this.editRows.splice(this.changingRowIndex, 1);
                        this.editRows.splice(this.changingRowIndex, 0, editRow);
                    }
                    break;
                }
                case FormState.Editing: {
                    dataValue[this.changingRowIndex] = editRow.data;
                    break;
                }
            }
        }
        editRow.state = this.component.rowDrafts && !isRowValid ? FormState.Draft : FormState.Saved;
        editRow.backup = null;
        this.updateValue();
        this.triggerChange();
        if (this.component.rowDrafts) {
            editRow.components.forEach(function (comp) { return comp.setPristine(_this.pristine); });
        }
        this.checkValidity(null, true);
        this.redraw();
        if (editRow.alerts) {
            editRow.alerts = false;
        }
        this.isChangingMode = false;
        this.changingRowIndex = null;
        this.shouldUpdate = true;
        this.toggleChangingMode();
        return true;
    };
    DynamicWizard.prototype.editRow = function (rowIndex) {
        var editRow = this.editRows[rowIndex];
        var isAlreadyEditing = editRow.state === FormState.Editing || editRow.state === FormState.New;
        if (!editRow || isAlreadyEditing) {
            return;
        }
        editRow.prevState = editRow.state;
        editRow.state = this.options.readOnly ? FormState.Viewing : FormState.Editing;
        var dataSnapshot = _.cloneDeep(editRow.data);
        if (this.inlineEditMode) {
            editRow.backup = dataSnapshot;
        }
        else {
            editRow.backup = editRow.data;
            editRow.data = dataSnapshot;
            this.restoreRowContext(editRow);
        }
        if (this.component.modal) {
            return this.addRowModal(rowIndex);
        }
        this.isChangingMode = true;
        this.changingRowIndex = rowIndex;
        this.step = 0;
        this.toggleChangingMode();
    };
    DynamicWizard.prototype.removeRow = function (rowIndex) {
        if (this.options.readOnly) {
            return;
        }
        this.baseRemoveRow(rowIndex);
        this.splice(rowIndex);
        this.editRows.splice(rowIndex, 1);
        this.updateRowsComponents(rowIndex);
        this.updateValue();
        this.triggerChange();
        this.checkValidity(null, true);
        this.checkData();
        this.redraw();
    };
    DynamicWizard.prototype.renderRow = function (row, rowIndex) {
        var dataValue = this.dataValue || [];
        var flattenedComponents = this.flattenComponents(rowIndex);
        var rowTemplate = Utils.Evaluator.noeval ? templates.row : _.get(this.component, 'templates.row', DynamicWizard.defaultRowTemplate);
        return this.renderString(rowTemplate, {
            row: dataValue[rowIndex] || {},
            data: this.data,
            rowIndex: rowIndex,
            components: this.component.components,
            flattenedComponents: flattenedComponents,
            getView: function (component, data) {
                var instance = flattenedComponents[component.key];
                var view = instance ? instance.getView(data || instance.dataValue) : '';
                if (instance && instance.widget && (view !== '--- PROTECTED ---')) {
                    if (_.isArray(view)) {
                        view = view.map(function (value) { return instance.widget.getValueAsString(value); });
                    }
                    else {
                        view = instance.widget.getValueAsString(view);
                    }
                }
                return view;
            },
            state: this.editRows[rowIndex].state,
        });
    };
    DynamicWizard.prototype.hasButton = function (name, nextPage) {
        if (nextPage === void 0) { nextPage = this.getNextPage(); }
        // get page options with global options as default values
        var _a = this.buttonSettings, _b = _a.previous, previous = _b === void 0 ? this.buttonSettings.showPrevious : _b, _c = _a.cancel, cancel = _c === void 0 ? this.buttonSettings.showCancel : _c, _d = _a.next, next = _d === void 0 ? this.buttonSettings.showNext : _d;
        switch (name) {
            case 'previous':
                return previous && this.page !== 0;
            case 'next':
                return next && nextPage;
            case 'cancel':
                return cancel;
            default:
                return true;
        }
    };
    DynamicWizard.prototype.getNextPage = function () {
        var _a;
        return this.step < ((_a = this.component) === null || _a === void 0 ? void 0 : _a.components.length);
    };
    DynamicWizard.prototype.prevPage = function () {
        if (this.step === 0) {
            this.root.prevPage();
        }
        else {
            var currStep = _.clone(this.step);
            this.step = currStep - 1;
        }
    };
    DynamicWizard.prototype.nextPage = function () {
        var _a;
        if (this.step === ((_a = this.component) === null || _a === void 0 ? void 0 : _a.components.length) - 1) {
            this.step = -1;
            this.saveRow();
            return this.step;
        }
        var prevStep = _.clone(this.step);
        this.step = prevStep + 1;
        return this.step;
    };
    DynamicWizard.prototype.toggleChangingMode = function () {
        var _a;
        if ((_a = this.root) === null || _a === void 0 ? void 0 : _a.element) {
            this.root.element.classList.toggle('dynamicWizard-changingMode');
            this.redraw();
        }
    };
    return DynamicWizard;
}(EditGrid));
export default DynamicWizard;
