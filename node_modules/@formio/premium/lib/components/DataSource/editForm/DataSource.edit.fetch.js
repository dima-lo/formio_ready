export default [
    {
        type: 'select',
        input: true,
        weight: 0,
        tooltip: 'The source to get the data data. You can fetch from a URL or use javascript to get the value.',
        key: 'dataSrc',
        defaultValue: 'url',
        label: 'Data Source Type',
        dataSrc: 'values',
        data: {
            values: [
                { label: 'URL', value: 'url' },
                { label: 'IndexedDB', value: 'indexeddb' },
            ],
        },
    },
    {
        type: 'checkbox',
        input: true,
        weight: 9,
        key: 'indexeddb.fromExisting',
        label: 'Choose from existing databases?',
        defaultValue: false,
        tooltip: 'Check it if you want to select an existing database.',
        conditional: {
            json: {
                in: [{ var: 'data.dataSrc' }, ['indexeddb']],
            },
        },
    },
    {
        type: 'textfield',
        weight: 10,
        input: true,
        key: 'indexeddb.database',
        label: 'Database name',
        forceOverride: true,
        tooltip: 'The name of the indexeddb database.',
        conditional: {
            json: {
                and: [
                    {
                        in: [{ var: 'data.dataSrc' }, ['indexeddb']],
                    },
                    {
                        '!==': [{ var: 'data.indexeddb.fromExisting' }, true],
                    },
                ],
            },
        },
    },
    {
        type: 'textfield',
        input: true,
        key: 'indexeddb.table',
        label: 'Table name',
        forceOverride: true,
        weight: 16,
        tooltip: 'The name of table in the indexeddb database.',
        conditional: {
            json: {
                and: [
                    {
                        in: [{ var: 'data.dataSrc' }, ['indexeddb']],
                    },
                    {
                        '!==': [{ var: 'data.indexeddb.fromExisting' }, true],
                    },
                ],
            },
        },
    },
    {
        type: 'select',
        input: true,
        key: 'indexeddb.database',
        label: 'Existing Database name',
        weight: 10,
        tooltip: 'The name of the existing indexeddb database.',
        dataSrc: 'custom',
        valueProperty: 'value',
        skipMerge: true,
        data: {
            custom: function (context) {
                if (!window.indexedDB) {
                    window.alert("Your browser doesn't support current version of indexedDB");
                    return [];
                }
                var values = window.indexedDB.databases()
                    .then(function (res) { return res.map(function (_a) {
                    var name = _a.name;
                    return ({ value: name, label: name });
                }); });
                return values;
            },
        },
        conditional: {
            json: {
                '===': [{ var: 'data.indexeddb.fromExisting' }, true],
            },
        },
    },
    {
        type: 'select',
        input: true,
        key: 'indexeddb.table',
        label: 'Existing Table name',
        refreshOn: 'indexeddb.database',
        clearOnRefresh: true,
        weight: 16,
        tooltip: 'The name of an existing table in the indexeddb database.',
        dataSrc: 'custom',
        valueProperty: 'value',
        skipMerge: true,
        data: {
            custom: function (context) {
                if (!window.indexedDB) {
                    window.alert("Your browser doesn't support current version of indexedDB");
                    return [];
                }
                var database = context.data.indexeddb.database;
                if (database) {
                    return new Promise(function (resolve) {
                        var db = window.indexedDB.open(database);
                        db.onsuccess = function (sender) {
                            var objectStoreNames = sender.target.result.objectStoreNames;
                            if (objectStoreNames.length) {
                                var values = Array.from(objectStoreNames).map(function (name) { return ({ value: name, label: name }); });
                                resolve(values);
                            }
                            else {
                                resolve([]);
                            }
                        };
                        db.onerror = function () { return resolve([]); };
                    });
                }
                return [];
            },
        },
        conditional: {
            json: {
                '===': [{ var: 'data.indexeddb.fromExisting' }, true],
            },
        },
    },
    {
        type: 'textfield',
        input: true,
        key: 'fetch.url',
        weight: 10,
        label: 'Data Source URL',
        placeholder: 'Data Source URL',
        tooltip: 'A URL that returns data. You can interpolate form data using curly bracket notation.',
        clearOnHide: true,
        conditional: {
            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
        },
    },
    {
        type: 'select',
        input: true,
        label: 'Method',
        key: 'fetch.method',
        clearOnHide: true,
        tooltip: 'The HTTP Request method to use when making the request.',
        defaultValue: 'get',
        weight: 11,
        template: '<span>{{ item.label }}</span>',
        dataSrc: 'values',
        data: {
            values: [
                { label: 'Get', value: 'get' },
                { label: 'Put', value: 'put' },
                { label: 'Post', value: 'post' },
                { label: 'Patch', value: 'patch' },
                { label: 'Delete', value: 'delete' },
            ],
        },
        conditional: {
            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
        },
    },
    {
        type: 'datagrid',
        input: true,
        label: 'Request Headers',
        key: 'fetch.headers',
        /* tslint:disable */
        tooltip: 'Set any headers that should be sent along with the request to the url. This is useful for authentication.',
        /* tslint:enable */
        weight: 12,
        components: [
            {
                label: 'Key',
                key: 'key',
                input: true,
                type: 'textfield',
            },
            {
                label: 'Value',
                key: 'value',
                input: true,
                type: 'textfield',
            },
        ],
        clearOnHide: true,
        conditional: {
            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
        },
    },
    {
        type: 'checkbox',
        input: true,
        key: 'fetch.forwardHeaders',
        label: 'Forward Headers',
        tooltip: 'Check this if you would like to forward the headers passed to the server to the fetch endpoint.',
        clearOnHide: true,
        conditional: {
            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
        },
    },
    {
        type: 'checkbox',
        input: true,
        weight: 26,
        key: 'fetch.authenticate',
        label: 'Form.io Authentication',
        tooltip: 'Check this if you would like to pass Form.io Authentication headers with the request.',
        clearOnHide: true,
        conditional: {
            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
        },
    },
    {
        type: 'panel',
        title: 'POST Body Specification',
        theme: 'default',
        collapsible: true,
        collapsed: true,
        key: 'specifyPostBodyPanel',
        weight: 1000,
        tooltip: 'Write custom code to specify POST Body.',
        conditional: {
            json: {
                and: [
                    {
                        '===': [{ var: 'data.dataSrc' }, 'url'],
                    },
                    {
                        '===': [{ var: 'data.fetch.method' }, 'post'],
                    },
                ],
            },
        },
        components: [
            {
                type: 'htmlelement',
                tag: 'div',
                /* eslint-disable prefer-template */
                content: '<p>The following variables are available in all scripts.</p>' +
                    '<table class="table table-bordered table-condensed table-striped">' +
                    '<tr><th>form</th><td>The complete form JSON object</td></tr>' +
                    '<tr><th>submission</th><td>The complete submission object.</td></tr>' +
                    '<tr><th>data</th><td>The complete submission data object.</td></tr>' +
                    '<tr><th>row</th><td>Contextual "row" data, used within DataGrid, EditGrid, and Container components</td></tr>' +
                    '<tr><th>component</th><td>The current component JSON</td></tr>' +
                    '<tr><th>instance</th><td>The current component instance.</td></tr>' +
                    '<tr><th>value</th><td>The current value of the component.</td></tr>' +
                    '<tr><th>moment</th><td>The moment.js library for date manipulation.</td></tr>' +
                    '<tr><th>_</th><td>An instance of <a href="https://lodash.com/docs/" target="_blank">Lodash</a>.</td></tr>' +
                    '<tr><th>utils</th><td>An instance of the <a href="http://formio.github.io/formio.js/docs/identifiers.html#utils" target="_blank">FormioUtils</a> object.</td></tr>' +
                    '<tr><th>util</th><td>An alias for "utils".</td></tr>' +
                    '</table><br/>'
                /* eslint-enable prefer-template */
            },
            {
                type: 'textarea',
                key: 'fetch.specifyPostBody',
                rows: 5,
                editor: 'ace',
                hideLabel: true,
                input: true,
                placeholder: 'body = {\n  data: {\n    b: data.a,\n    submit: true,\n  },\n}'
            },
            {
                type: 'htmlelement',
                tag: 'div',
                content: '<p>Enter custom javascript code.</p><p><h4>Example:</h4><pre>body = {\n  data: {\n    b: data.a,\n    submit: true,\n  },\n};</pre></p>'
            }
        ]
    }
    // TODO: Add custom calculation of value with async possibility.
];
