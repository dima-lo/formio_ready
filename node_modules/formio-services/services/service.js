'use strict';

const request = require('request');
const _ = require('lodash');

module.exports = (config) => {
  if (config.service) {
    const parts = config.service.split('?');
    config.service = _.trimEnd(parts[0], '/');
    config.query = (parts.length > 1) ? (`?${parts[1]}`) : '';
  }

  return {
    active: Boolean(config.service),
    callPromise(method, path, body, next) {
      return new Promise((resolve, reject) => {
        this.call(method, path, body, (err, result) => {
          if (err) {
            return reject(err);
          }

          resolve(result);
        });
      });
    },
    call(method, path, body, next) {
      request({
        url: config.service + path + config.query,
        method: method.toUpperCase(),
        json: true,
        body
      }, (error, response, body) => {
        if (!next) {
          return null;
        }

        if (!response) {
          return next('Invalid response.');
        }

        if (response.statusCode >= 200 && response.statusCode <= 299) {
          return next(null, body);
        }

        return next(body);
      });
    }
  };
};
